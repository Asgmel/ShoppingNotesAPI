<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShoppingNotes</name>
    </assembly>
    <members>
        <member name="T:ShoppingNotes.Controllers.NotesController">
            <summary>
            The controller for actions related to notes
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.#ctor(ShoppingNotes.Data.INoteRepo,ShoppingNotes.Data.ISListRepo,AutoMapper.IMapper)">
            <summary>
            Notes Constructor
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.GetAllNotes(System.Nullable{System.Int32})">
            <summary>
            Gets all notes for a user, or a list if listId is specified.
            </summary>
            <param name="listId">OPTIONAL - List listId to filter results by</param>
            <returns>A list of notes</returns>
            <response code="200">OK - Returns the requested notes</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to access the supplied listId notes</response>
            <response code="404">Not Found - The supplied listId was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.GetNoteById(System.Int32)">
            <summary>
            Gets a single note by ID
            </summary>
            <param name="id">The ID of the note to fetch</param>
            <returns>A note</returns>
            <response code="200">OK - Returns the requested note</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to access the note</response>
            <response code="404">Not Found - The supplied note was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.CreateNote(ShoppingNotes.Dtos.NoteCreateDto)">
            <summary>
            Create a new note
            </summary>
            <param name="noteCreateDto">The note object</param>
            <returns>The created note</returns>
            <response code="200">OK - Creates the note</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to create the note</response>
            <response code="404">Not Found - The list was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.UpdateNote(System.Int32,ShoppingNotes.Dtos.NoteUpdateDto)">
            <summary>
            Update a note with the PUT method
            </summary>
            <param name="id">The noteId to update</param>
            <param name="noteUpdateDto">The note body with updated values</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The note was updated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to update the note</response>
            <response code="404">Not Found - The supplied note was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.PartiallyUpdateNote(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ShoppingNotes.Dtos.NoteUpdateDto})">
            <summary>
            Update the note with the PATCH method
            </summary>
            <param name="id">The id of the note to update</param>
            <param name="patchDocument">The patchdocument body</param>
            <returns>An Actionresult (NoContent)</returns>
            <response code="204">NoContent - The note was updated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to update the note</response>
            <response code="404">Not Found - The supplied note was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.NotesController.DeleteNote(System.Int32)">
            <summary>
            Deletes a note
            </summary>
            <param name="id">The id of the note to delete</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The note was deleted successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to delete the note</response>
            <response code="404">Not Found - The supplied note was not found</response>
        </member>
        <member name="T:ShoppingNotes.Controllers.SListsController">
            <summary>
            The controller for the routes related to SLists
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.#ctor(ShoppingNotes.Data.ISListRepo,ShoppingNotes.Data.IUserRepo,AutoMapper.IMapper)">
            <summary>
            ListsController Constructor
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.GetAllLists">
            <summary>
            Gets all lists for a user
            </summary>
            <returns>A list of lists</returns>
            <response code="200">Ok - List get request successfull</response>
            <response code="400">Bad Request - Invalid user input</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.GetListById(System.Int32)">
            <summary>
            Gets a single list by ID
            </summary>
            <param name="id">The list ID</param>
            <returns>A single list</returns>
            <response code="200">Ok - List get request successfull</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to access the list</response>
            <response code="404">Not Found - The supplied list was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.CreateList(ShoppingNotes.Dtos.SListCreateDto)">
            <summary>
            Creates a new list
            </summary>
            <param name="sListCreateDto">The list body</param>
            <returns>The created list</returns>
            <response code="201">Created - The list was created successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="404">NotFound - The user was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.UpdateList(System.Int32,ShoppingNotes.Dtos.SListUpdateDto)">
            <summary>
            Updates a list by ID with the PUT method
            </summary>
            <param name="id">The id of the list to update</param>
            <param name="sListUpdateDto">The update body</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The list was updated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to update the list</response>
            <response code="404">Not Found - The supplied list was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.PartiallyUpdateList(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ShoppingNotes.Dtos.SListUpdateDto})">
            <summary>
            Updates a list by ID with the PATCH method
            </summary>
            <param name="id">The list id</param>
            <param name="patchDocument">The patchdocument body</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The list is updated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to update the list</response>
            <response code="404">Not Found - The supplied list was not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.SListsController.DeleteList(System.Int32)">
            <summary>
            Deletes a list and all its tasks from the DB
            </summary>
            <param name="id">The list ID</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The list was deleted successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="403">Forbidden - User is not authorized to delete the list</response>
            <response code="404">Not Found - The supplied list was not found</response>
        </member>
        <member name="T:ShoppingNotes.Controllers.UsersController">
            <summary>
            The controller for the actions related to Users
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.#ctor(ShoppingNotes.Data.IUserRepo,AutoMapper.IMapper,ShoppingNotes.Services.IAuthService,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Users Constructor
            </summary>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.GetUser">
            <summary>
            Gets the user info for the logged in user
            </summary>
            <returns>The user</returns>
            <response code="200">Ok - The user was fetched successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="401">Not Authorized - The user is not logged in</response>
            <response code="404">Not Found - The user object is not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.CreateUser(ShoppingNotes.Dtos.UserCreateDto)">
            <summary>
            Creates a new user
            </summary>
            <param name="userCreateDto">The user object</param>
            <returns>The created user</returns>
            <response code="201">Created - The user was created successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.UpdatePassword(ShoppingNotes.Dtos.UserUpdateDto)">
            <summary>
            Updates the logged in users password
            </summary>
            <param name="userUpdateDto">The update body</param>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">NoContent - The user was updated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="401">Unauthorized - Invalid password or not logged in</response>
            <response code="404">Not Found - Invalid password</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.DeleteUser">
            <summary>
            Deletes the currently logged in user
            </summary>
            <returns>An ActionResult (NoContent)</returns>
            <response code="204">No Content - The user was deleted successfully</response>
            <response code="401">Unauthorized - The user is not logged in</response>
            <response code="404">Not Found - The user is not found</response>
        </member>
        <member name="M:ShoppingNotes.Controllers.UsersController.Login(ShoppingNotes.Dtos.UserAuthDto)">
            <summary>
            Logs the user in to the API
            </summary>
            <param name="userAuthDto">The login object containing userName and password</param>
            <returns>A new JWT to authenticate the user</returns>
            <response code="200">Ok - The user was authenticated successfully</response>
            <response code="400">Bad Request - Invalid user input</response>
            <response code="401">Unauthorized - Wrong user name or password</response>
        </member>
        <member name="T:ShoppingNotes.Dtos.NoteCreateDto">
            <summary>
            A DTO for creating notes
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteCreateDto.Content">
            <summary>
            The note content
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteCreateDto.IsCompleted">
            <summary>
            The note status, true if completed, false if not
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteCreateDto.SListId">
            <summary>
            The ID of the list where the note lives
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.NoteReadDto">
            <summary>
            A DTO for reading notes
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteReadDto.Id">
            <summary>
            The note ID
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteReadDto.Content">
            <summary>
            The note contents
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteReadDto.IsCompleted">
            <summary>
            The note status, true if completed, false if not
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteReadDto.SListId">
            <summary>
            The ID of the list where the note lives
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.NoteUpdateDto">
            <summary>
            A DTO for updating Notes
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteUpdateDto.Content">
            <summary>
            The note content
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.NoteUpdateDto.IsCompleted">
            <summary>
            The note status, true if completed, false if not
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.SListCreateDto">
            <summary>
            A DTO for creating lists
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.SListCreateDto.Name">
            <summary>
            The list name
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.SListReadDto">
            <summary>
            A DTO for reading lists
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.SListReadDto.Id">
            <summary>
            The list ID
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.SListReadDto.Name">
            <summary>
            The list name
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.SListReadDto.UserId">
            <summary>
            The ID of the user that created the list
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.SListUpdateDto">
            <summary>
            A DTO for updating lists
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.SListUpdateDto.Name">
            <summary>
            The list name
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.UserAuthDto">
            <summary>
            A DTO for authenticating users
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserAuthDto.UserName">
            <summary>
            The users user name
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserAuthDto.Password">
            <summary>
            The users password
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.UserCreateDto">
            <summary>
            A DTO for creating users
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserCreateDto.UserName">
            <summary>
            The users user name
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserCreateDto.Password">
            <summary>
            The users password
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.UserReadDto">
            <summary>
            A DTO for reading users
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserReadDto.Id">
            <summary>
            The users ID
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserReadDto.UserName">
            <summary>
            The users user name
            </summary>
        </member>
        <member name="T:ShoppingNotes.Dtos.UserUpdateDto">
            <summary>
            A DTO for updating users passwords
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserUpdateDto.CurrentPassword">
            <summary>
            The users current password
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserUpdateDto.NewPassword">
            <summary>
            The users new password
            </summary>
        </member>
        <member name="P:ShoppingNotes.Dtos.UserUpdateDto.RepeatNewPassword">
            <summary>
            The users new password repeated
            </summary>
        </member>
        <member name="T:ShoppingNotes.Migrations.NotesAppInitialMigration">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesAppInitialMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesAppInitialMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesAppInitialMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ShoppingNotes.Migrations.NotesUpdatedRelationsships">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesUpdatedRelationsships.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesUpdatedRelationsships.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.NotesUpdatedRelationsships.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ShoppingNotes.Migrations.userobjectchangespasswordadded">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.userobjectchangespasswordadded.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.userobjectchangespasswordadded.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ShoppingNotes.Migrations.userobjectchangespasswordadded.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ShoppingNotes.Models.Note">
            <summary>
            The model for the Note entity 
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.Note.Id">
            <summary>
            The note ID, primary key
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.Note.Content">
            <summary>
            The text content of the note
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.Note.IsCompleted">
            <summary>
            Boolean to check if the note is checked as completed or not
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.Note.SListId">
            <summary>
            The ID of the list that contains the note
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.Note.SList">
            <summary>
            The list that contains the note
            </summary>
        </member>
        <member name="T:ShoppingNotes.Models.SList">
            <summary>
            The model for the SList entity
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.SList.Id">
            <summary>
            The SList ID, primary key
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.SList.Name">
            <summary>
            The name of the sList
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.SList.Notes">
            <summary>
            The collection of notes that exist within the list
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.SList.UserId">
            <summary>
            The ID of the user that created the list
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.SList.User">
            <summary>
            The user that created the list
            </summary>
        </member>
        <member name="T:ShoppingNotes.Models.User">
            <summary>
            The model for the user entity
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.User.Id">
            <summary>
            The user ID, primary key
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.User.UserName">
            <summary>
            The users username
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.User.PasswordHash">
            <summary>
            The users password hash
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.User.PasswordSalt">
            <summary>
            The users password hash
            </summary>
        </member>
        <member name="P:ShoppingNotes.Models.User.SLists">
            <summary>
            A collection of SLists that the user has created
            </summary>
        </member>
        <member name="T:ShoppingNotes.Services.IAuthService">
            <summary>
            Interface for auth services
            </summary>
        </member>
        <member name="M:ShoppingNotes.Services.IAuthService.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Creates a password hash and salt based on the input plaintext password
            </summary>
            <param name="password">The users password in plaintext</param>
            <param name="hash">Contains the created hash based on the input password</param>
            <param name="salt">Contains the created salt based on the input password</param>
        </member>
        <member name="M:ShoppingNotes.Services.IAuthService.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Verifies that the input password hash matches the users password hash
            </summary>
            <param name="password">The user plaintext password</param>
            <param name="passwordHash">The user hashed password</param>
            <param name="passwordSalt">The salt used to hash the users password</param>
            <returns>true if the passwords match, false otherwise.</returns>
        </member>
        <member name="M:ShoppingNotes.Services.IAuthService.CreateToken(ShoppingNotes.Dtos.UserReadDto)">
            <summary>
            Creates a JWT token for the user
            </summary>
            <returns>a string with the users JWT token</returns>
        </member>
        <member name="T:AuthorizationOperationFilter">
            <summary>
            A filter to apply padlocks to only routes that require authentication
            </summary>
        </member>
        <member name="M:AuthorizationOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the filter
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
